#ifndef _API_ARMY_HPP_
#define _API_ARMY_HPP_

#include <optional>
#include <map>
#include "API_Unit.hpp"


//*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*//

namespace GameModel {

//*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*//

	typedef
		std::map < int, std::unique_ptr< GameModel::Unit> >
		armyContainer;

//*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*//
	
	typedef
		armyContainer::const_iterator
		armyIt;
	
//*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*//

	typedef
		armyContainer::const_iterator::value_type
		armyPair;

//*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*//

	class Army
	{

//*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*//

	public:

		Army() 
		{}

		virtual int getArmySize() const = 0;
		virtual int getMaxUnitsCount() const = 0;
		virtual int getID() const = 0;
		virtual double getHPForID(int _id) const = 0;
		virtual GameModel::Unit & getUnitForID(int _id) const = 0;


		virtual bool hasUnitInArmy( int _id ) const = 0;
		virtual bool hasArmyDistroed() const = 0;

		virtual void 
			addUnit(std::unique_ptr< GameModel::Unit > _unit) = 0;

		virtual void removedUnit(int _id) = 0;
	
		virtual  std::optional < GameModel::Unit * > findUnit(int _id) const = 0;

	
//*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*//

	private:

		void isAmyFullness() const;

	};


//*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*//

}// namespace GameModel

//*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*//

#endif // !_API_ARMY_HPP_